plugins {
    id "net.minecraftforge.gradle" version "5.1.+"
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${mod_version}"
group = 'catbop'
archivesBaseName = "${mod_id}-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "${mappings_provider}", version: "${mappings_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${project.name}.main"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.enabledGameTestNamespaces', 'catbopthings'

            mods {
                catbopthings {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                catbopthings {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.enabledGameTestNamespaces', 'catbopthings'

            mods {
                catbopthings {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'catbopthings', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                catbopthings {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "catbopthings.refmap.json"
    config "catbopthings.mixins.json"

    debug.verbose = true
    debug.export = true
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    maven {
        name 'TCon and Mantle'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'misc_and_things, jsonthings, rhino'
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'Registrate'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        name = "JEI"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "JEI fallback"
        url = "https://modmaven.dev"
    }
}

jarJar.enable()

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

//    implementation fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_build}")
//    implementation fg.deobf("slimeknights.tconstruct:TConstruct:${minecraft_version}-${tinkers_build}")
    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")

    compileOnly fg.deobf("dev.dhyces.biomeextensions:biomeextensions-${minecraft_version}-forge-api:${dbe_version}")
    runtimeOnly(jarJar(fg.deobf("dev.dhyces.biomeextensions:biomeextensions-${minecraft_version}-forge:${dbe_version}")) {
        jarJar.ranged(it, "[1.0.0, 2.0.0)")
    })

    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    runtimeOnly fg.deobf("curse.maven:jsonthings-541617:${jsonthings_fileid}")
//    runtimeOnly fg.deobf("curse.maven:create_things_and_misc-652202:${ctam_fileid}")
//    runtimeOnly fg.deobf("curse.maven:createadditions-439890:${createaddition_fileid}")
    runtimeOnly fg.deobf("curse.maven:citadel-331936:${citadel_fileid}")
    runtimeOnly fg.deobf("curse.maven:alexsmobs-426558:${alexsmobs_fileid}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "catbop",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "catbop",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_id}" }
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    exclude("**/catbopthings/modifiers/*")
}
